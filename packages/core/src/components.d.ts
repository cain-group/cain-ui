/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface CaAside {
        "width": string;
    }
    interface CaButton {
        "autofocus": boolean;
        "circle": boolean;
        "disabled": boolean;
        "loading": boolean;
        "nativeType": string;
        "plain": boolean;
        "round": boolean;
        "size": string;
        "type": 'primary' | 'success' | 'warning' | 'info' | 'danger' | 'default';
    }
    interface CaButtonGroup {
        "size": string;
        "type": string;
    }
    interface CaCheckbox {
        "border": boolean;
        "checked": boolean;
        "disabled": boolean;
        "disabledByFahter": boolean;
        "falseLabel": [string, number];
        "indeterminate": boolean;
        "label": string;
        "name": string;
        "size": string;
        "tabindex": number;
        "trueLabel": [string, number];
        "value": string;
    }
    interface CaCheckboxGroup {
        "disabled": boolean;
        "max": string;
        "min": string;
        "size": string;
        "value": string;
    }
    interface CaCol {
        "lg": number;
        "md": number;
        "offset": number;
        "pull": number;
        "push": number;
        "sm": number;
        "span": number;
        "xl": number;
        "xs": number;
    }
    interface CaContainer {
        "direction": string;
    }
    interface CaFooter {
        "height": string;
    }
    interface CaHeader {
        "height": string;
    }
    interface CaIcon {
    }
    interface CaLink {
        "disabled": boolean;
        "href": string;
        "type": 'primary' | 'success' | 'warning' | 'info' | 'danger' | 'default';
        "underline": boolean;
    }
    interface CaMain {
    }
    interface CaRow {
        "align": 'top' | 'middle' | 'bottom' | 'space-around' | 'space-between' | 'space-evenly';
        "gutter": number;
        "justify": 'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly';
    }
}
declare global {
    interface HTMLCaAsideElement extends Components.CaAside, HTMLStencilElement {
    }
    var HTMLCaAsideElement: {
        prototype: HTMLCaAsideElement;
        new (): HTMLCaAsideElement;
    };
    interface HTMLCaButtonElement extends Components.CaButton, HTMLStencilElement {
    }
    var HTMLCaButtonElement: {
        prototype: HTMLCaButtonElement;
        new (): HTMLCaButtonElement;
    };
    interface HTMLCaButtonGroupElement extends Components.CaButtonGroup, HTMLStencilElement {
    }
    var HTMLCaButtonGroupElement: {
        prototype: HTMLCaButtonGroupElement;
        new (): HTMLCaButtonGroupElement;
    };
    interface HTMLCaCheckboxElement extends Components.CaCheckbox, HTMLStencilElement {
    }
    var HTMLCaCheckboxElement: {
        prototype: HTMLCaCheckboxElement;
        new (): HTMLCaCheckboxElement;
    };
    interface HTMLCaCheckboxGroupElement extends Components.CaCheckboxGroup, HTMLStencilElement {
    }
    var HTMLCaCheckboxGroupElement: {
        prototype: HTMLCaCheckboxGroupElement;
        new (): HTMLCaCheckboxGroupElement;
    };
    interface HTMLCaColElement extends Components.CaCol, HTMLStencilElement {
    }
    var HTMLCaColElement: {
        prototype: HTMLCaColElement;
        new (): HTMLCaColElement;
    };
    interface HTMLCaContainerElement extends Components.CaContainer, HTMLStencilElement {
    }
    var HTMLCaContainerElement: {
        prototype: HTMLCaContainerElement;
        new (): HTMLCaContainerElement;
    };
    interface HTMLCaFooterElement extends Components.CaFooter, HTMLStencilElement {
    }
    var HTMLCaFooterElement: {
        prototype: HTMLCaFooterElement;
        new (): HTMLCaFooterElement;
    };
    interface HTMLCaHeaderElement extends Components.CaHeader, HTMLStencilElement {
    }
    var HTMLCaHeaderElement: {
        prototype: HTMLCaHeaderElement;
        new (): HTMLCaHeaderElement;
    };
    interface HTMLCaIconElement extends Components.CaIcon, HTMLStencilElement {
    }
    var HTMLCaIconElement: {
        prototype: HTMLCaIconElement;
        new (): HTMLCaIconElement;
    };
    interface HTMLCaLinkElement extends Components.CaLink, HTMLStencilElement {
    }
    var HTMLCaLinkElement: {
        prototype: HTMLCaLinkElement;
        new (): HTMLCaLinkElement;
    };
    interface HTMLCaMainElement extends Components.CaMain, HTMLStencilElement {
    }
    var HTMLCaMainElement: {
        prototype: HTMLCaMainElement;
        new (): HTMLCaMainElement;
    };
    interface HTMLCaRowElement extends Components.CaRow, HTMLStencilElement {
    }
    var HTMLCaRowElement: {
        prototype: HTMLCaRowElement;
        new (): HTMLCaRowElement;
    };
    interface HTMLElementTagNameMap {
        "ca-aside": HTMLCaAsideElement;
        "ca-button": HTMLCaButtonElement;
        "ca-button-group": HTMLCaButtonGroupElement;
        "ca-checkbox": HTMLCaCheckboxElement;
        "ca-checkbox-group": HTMLCaCheckboxGroupElement;
        "ca-col": HTMLCaColElement;
        "ca-container": HTMLCaContainerElement;
        "ca-footer": HTMLCaFooterElement;
        "ca-header": HTMLCaHeaderElement;
        "ca-icon": HTMLCaIconElement;
        "ca-link": HTMLCaLinkElement;
        "ca-main": HTMLCaMainElement;
        "ca-row": HTMLCaRowElement;
    }
}
declare namespace LocalJSX {
    interface CaAside {
        "width"?: string;
    }
    interface CaButton {
        "autofocus"?: boolean;
        "circle"?: boolean;
        "disabled"?: boolean;
        "loading"?: boolean;
        "nativeType"?: string;
        "plain"?: boolean;
        "round"?: boolean;
        "size"?: string;
        "type"?: 'primary' | 'success' | 'warning' | 'info' | 'danger' | 'default';
    }
    interface CaButtonGroup {
        "size"?: string;
        "type"?: string;
    }
    interface CaCheckbox {
        "border"?: boolean;
        "checked"?: boolean;
        "disabled"?: boolean;
        "disabledByFahter"?: boolean;
        "falseLabel"?: [string, number];
        "indeterminate"?: boolean;
        "label"?: string;
        "name"?: string;
        "onCheckboxChange"?: (event: CustomEvent<any>) => void;
        "size"?: string;
        "tabindex"?: number;
        "trueLabel"?: [string, number];
        "value"?: string;
    }
    interface CaCheckboxGroup {
        "disabled"?: boolean;
        "max"?: string;
        "min"?: string;
        "size"?: string;
        "value"?: string;
    }
    interface CaCol {
        "lg"?: number;
        "md"?: number;
        "offset"?: number;
        "pull"?: number;
        "push"?: number;
        "sm"?: number;
        "span"?: number;
        "xl"?: number;
        "xs"?: number;
    }
    interface CaContainer {
        "direction"?: string;
    }
    interface CaFooter {
        "height"?: string;
    }
    interface CaHeader {
        "height"?: string;
    }
    interface CaIcon {
    }
    interface CaLink {
        "disabled"?: boolean;
        "href"?: string;
        "type"?: 'primary' | 'success' | 'warning' | 'info' | 'danger' | 'default';
        "underline"?: boolean;
    }
    interface CaMain {
    }
    interface CaRow {
        "align"?: 'top' | 'middle' | 'bottom' | 'space-around' | 'space-between' | 'space-evenly';
        "gutter"?: number;
        "justify"?: 'start' | 'center' | 'end' | 'space-around' | 'space-between' | 'space-evenly';
    }
    interface IntrinsicElements {
        "ca-aside": CaAside;
        "ca-button": CaButton;
        "ca-button-group": CaButtonGroup;
        "ca-checkbox": CaCheckbox;
        "ca-checkbox-group": CaCheckboxGroup;
        "ca-col": CaCol;
        "ca-container": CaContainer;
        "ca-footer": CaFooter;
        "ca-header": CaHeader;
        "ca-icon": CaIcon;
        "ca-link": CaLink;
        "ca-main": CaMain;
        "ca-row": CaRow;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ca-aside": LocalJSX.CaAside & JSXBase.HTMLAttributes<HTMLCaAsideElement>;
            "ca-button": LocalJSX.CaButton & JSXBase.HTMLAttributes<HTMLCaButtonElement>;
            "ca-button-group": LocalJSX.CaButtonGroup & JSXBase.HTMLAttributes<HTMLCaButtonGroupElement>;
            "ca-checkbox": LocalJSX.CaCheckbox & JSXBase.HTMLAttributes<HTMLCaCheckboxElement>;
            "ca-checkbox-group": LocalJSX.CaCheckboxGroup & JSXBase.HTMLAttributes<HTMLCaCheckboxGroupElement>;
            "ca-col": LocalJSX.CaCol & JSXBase.HTMLAttributes<HTMLCaColElement>;
            "ca-container": LocalJSX.CaContainer & JSXBase.HTMLAttributes<HTMLCaContainerElement>;
            "ca-footer": LocalJSX.CaFooter & JSXBase.HTMLAttributes<HTMLCaFooterElement>;
            "ca-header": LocalJSX.CaHeader & JSXBase.HTMLAttributes<HTMLCaHeaderElement>;
            "ca-icon": LocalJSX.CaIcon & JSXBase.HTMLAttributes<HTMLCaIconElement>;
            "ca-link": LocalJSX.CaLink & JSXBase.HTMLAttributes<HTMLCaLinkElement>;
            "ca-main": LocalJSX.CaMain & JSXBase.HTMLAttributes<HTMLCaMainElement>;
            "ca-row": LocalJSX.CaRow & JSXBase.HTMLAttributes<HTMLCaRowElement>;
        }
    }
}
