/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@cain-group/cain-ui';


interface CaColProps {
  
  /**  */
  span?: Components.CaCol["span"]
  
  /**  */
  offset?: Components.CaCol["offset"]
  
  /**  */
  pull?: Components.CaCol["pull"]
  
  /**  */
  push?: Components.CaCol["push"]
  
  /**  */
  xs?: Components.CaCol["xs"]
  
  /**  */
  sm?: Components.CaCol["sm"]
  
  /**  */
  md?: Components.CaCol["md"]
  
  /**  */
  lg?: Components.CaCol["lg"]
  
  /**  */
  xl?: Components.CaCol["xl"]
}

interface CaColEvents {
  
}

interface CaColSlots {
  default: any
}
  
/* generated by Svelte v3.47.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let ca_col;
	let current;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	return {
		c() {
			ca_col = element("ca-col");
			if (default_slot) default_slot.c();
			set_custom_element_data(ca_col, "span", /*span*/ ctx[0]);
			set_custom_element_data(ca_col, "offset", /*offset*/ ctx[1]);
			set_custom_element_data(ca_col, "pull", /*pull*/ ctx[2]);
			set_custom_element_data(ca_col, "push", /*push*/ ctx[3]);
			set_custom_element_data(ca_col, "xs", /*xs*/ ctx[4]);
			set_custom_element_data(ca_col, "sm", /*sm*/ ctx[5]);
			set_custom_element_data(ca_col, "md", /*md*/ ctx[6]);
			set_custom_element_data(ca_col, "lg", /*lg*/ ctx[7]);
			set_custom_element_data(ca_col, "xl", /*xl*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, ca_col, anchor);

			if (default_slot) {
				default_slot.m(ca_col, null);
			}

			/*ca_col_binding*/ ctx[13](ca_col);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*span*/ 1) {
				set_custom_element_data(ca_col, "span", /*span*/ ctx[0]);
			}

			if (!current || dirty & /*offset*/ 2) {
				set_custom_element_data(ca_col, "offset", /*offset*/ ctx[1]);
			}

			if (!current || dirty & /*pull*/ 4) {
				set_custom_element_data(ca_col, "pull", /*pull*/ ctx[2]);
			}

			if (!current || dirty & /*push*/ 8) {
				set_custom_element_data(ca_col, "push", /*push*/ ctx[3]);
			}

			if (!current || dirty & /*xs*/ 16) {
				set_custom_element_data(ca_col, "xs", /*xs*/ ctx[4]);
			}

			if (!current || dirty & /*sm*/ 32) {
				set_custom_element_data(ca_col, "sm", /*sm*/ ctx[5]);
			}

			if (!current || dirty & /*md*/ 64) {
				set_custom_element_data(ca_col, "md", /*md*/ ctx[6]);
			}

			if (!current || dirty & /*lg*/ 128) {
				set_custom_element_data(ca_col, "lg", /*lg*/ ctx[7]);
			}

			if (!current || dirty & /*xl*/ 256) {
				set_custom_element_data(ca_col, "xl", /*xl*/ ctx[8]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ca_col);
			if (default_slot) default_slot.d(detaching);
			/*ca_col_binding*/ ctx[13](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { span = undefined } = $$props;
	let { offset = undefined } = $$props;
	let { pull = undefined } = $$props;
	let { push = undefined } = $$props;
	let { xs = undefined } = $$props;
	let { sm = undefined } = $$props;
	let { md = undefined } = $$props;
	let { lg = undefined } = $$props;
	let { xl = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(9, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function ca_col_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(9, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('span' in $$props) $$invalidate(0, span = $$props.span);
		if ('offset' in $$props) $$invalidate(1, offset = $$props.offset);
		if ('pull' in $$props) $$invalidate(2, pull = $$props.pull);
		if ('push' in $$props) $$invalidate(3, push = $$props.push);
		if ('xs' in $$props) $$invalidate(4, xs = $$props.xs);
		if ('sm' in $$props) $$invalidate(5, sm = $$props.sm);
		if ('md' in $$props) $$invalidate(6, md = $$props.md);
		if ('lg' in $$props) $$invalidate(7, lg = $$props.lg);
		if ('xl' in $$props) $$invalidate(8, xl = $$props.xl);
		if ('$$scope' in $$props) $$invalidate(11, $$scope = $$props.$$scope);
	};

	return [
		span,
		offset,
		pull,
		push,
		xs,
		sm,
		md,
		lg,
		xl,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		ca_col_binding
	];
}

class CaCol extends SvelteComponent {
  $$prop_def: CaColProps;
  $$events_def: CaColEvents;
  $$slot_def: CaColSlots;

  $on<K extends keyof CaColEvents>(type: K, callback: (e: CaColEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<CaColProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			span: 0,
			offset: 1,
			pull: 2,
			push: 3,
			xs: 4,
			sm: 5,
			md: 6,
			lg: 7,
			xl: 8,
			getWebComponent: 10
		});
	}

	get span() {
		return this.$$.ctx[0];
	}

	set span(span) {
		this.$$set({ span });
		flush();
	}

	get offset() {
		return this.$$.ctx[1];
	}

	set offset(offset) {
		this.$$set({ offset });
		flush();
	}

	get pull() {
		return this.$$.ctx[2];
	}

	set pull(pull) {
		this.$$set({ pull });
		flush();
	}

	get push() {
		return this.$$.ctx[3];
	}

	set push(push) {
		this.$$set({ push });
		flush();
	}

	get xs() {
		return this.$$.ctx[4];
	}

	set xs(xs) {
		this.$$set({ xs });
		flush();
	}

	get sm() {
		return this.$$.ctx[5];
	}

	set sm(sm) {
		this.$$set({ sm });
		flush();
	}

	get md() {
		return this.$$.ctx[6];
	}

	set md(md) {
		this.$$set({ md });
		flush();
	}

	get lg() {
		return this.$$.ctx[7];
	}

	set lg(lg) {
		this.$$set({ lg });
		flush();
	}

	get xl() {
		return this.$$.ctx[8];
	}

	set xl(xl) {
		this.$$set({ xl });
		flush();
	}

	get getWebComponent(): HTMLCaColElement | undefined {
		return this.$$.ctx[10];
	}
}

export default CaCol;