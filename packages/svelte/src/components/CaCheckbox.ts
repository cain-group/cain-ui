/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@cain-group/cain-ui';


interface CaCheckboxProps {
  
  /**  */
  value?: Components.CaCheckbox["value"]
  
  /**  */
  label?: Components.CaCheckbox["label"]
  
  /**  */
  indeterminate?: Components.CaCheckbox["indeterminate"]
  
  /**  */
  disabled?: Components.CaCheckbox["disabled"]
  
  /**  */
  disabledByFahter?: Components.CaCheckbox["disabledByFahter"]
  
  /**  */
  checked?: Components.CaCheckbox["checked"]
  
  /**  */
  name?: Components.CaCheckbox["name"]
  
  /**  */
  trueLabel?: Components.CaCheckbox["trueLabel"]
  
  /**  */
  falseLabel?: Components.CaCheckbox["falseLabel"]
  
  /**  */
  border?: Components.CaCheckbox["border"]
  
  /**  */
  size?: Components.CaCheckbox["size"]
  
  /**  */
  tabindex?: Components.CaCheckbox["tabindex"]
}

interface CaCheckboxEvents {
  
  /**  */
  checkboxChange: Parameters<JSX.CaCheckbox["onCheckboxChange"]>[0]
}

interface CaCheckboxSlots {
  default: any
}
  
/* generated by Svelte v3.47.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	listen,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let ca_checkbox;
	let current;
	let mounted;
	let dispose;
	const default_slot_template = /*#slots*/ ctx[17].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[16], null);

	return {
		c() {
			ca_checkbox = element("ca-checkbox");
			if (default_slot) default_slot.c();
			set_custom_element_data(ca_checkbox, "value", /*value*/ ctx[0]);
			set_custom_element_data(ca_checkbox, "label", /*label*/ ctx[1]);
			set_custom_element_data(ca_checkbox, "indeterminate", /*indeterminate*/ ctx[2]);
			set_custom_element_data(ca_checkbox, "disabled", /*disabled*/ ctx[3]);
			set_custom_element_data(ca_checkbox, "disabled-by-fahter", /*disabledByFahter*/ ctx[4]);
			set_custom_element_data(ca_checkbox, "checked", /*checked*/ ctx[5]);
			set_custom_element_data(ca_checkbox, "name", /*name*/ ctx[6]);
			set_custom_element_data(ca_checkbox, "border", /*border*/ ctx[7]);
			set_custom_element_data(ca_checkbox, "size", /*size*/ ctx[8]);
			set_custom_element_data(ca_checkbox, "tabindex", /*tabindex*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, ca_checkbox, anchor);

			if (default_slot) {
				default_slot.m(ca_checkbox, null);
			}

			/*ca_checkbox_binding*/ ctx[18](ca_checkbox);
			current = true;

			if (!mounted) {
				dispose = listen(ca_checkbox, "checkboxChange", /*onEvent*/ ctx[11]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 65536)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[16],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[16])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[16], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*value*/ 1) {
				set_custom_element_data(ca_checkbox, "value", /*value*/ ctx[0]);
			}

			if (!current || dirty & /*label*/ 2) {
				set_custom_element_data(ca_checkbox, "label", /*label*/ ctx[1]);
			}

			if (!current || dirty & /*indeterminate*/ 4) {
				set_custom_element_data(ca_checkbox, "indeterminate", /*indeterminate*/ ctx[2]);
			}

			if (!current || dirty & /*disabled*/ 8) {
				set_custom_element_data(ca_checkbox, "disabled", /*disabled*/ ctx[3]);
			}

			if (!current || dirty & /*disabledByFahter*/ 16) {
				set_custom_element_data(ca_checkbox, "disabled-by-fahter", /*disabledByFahter*/ ctx[4]);
			}

			if (!current || dirty & /*checked*/ 32) {
				set_custom_element_data(ca_checkbox, "checked", /*checked*/ ctx[5]);
			}

			if (!current || dirty & /*name*/ 64) {
				set_custom_element_data(ca_checkbox, "name", /*name*/ ctx[6]);
			}

			if (!current || dirty & /*border*/ 128) {
				set_custom_element_data(ca_checkbox, "border", /*border*/ ctx[7]);
			}

			if (!current || dirty & /*size*/ 256) {
				set_custom_element_data(ca_checkbox, "size", /*size*/ ctx[8]);
			}

			if (!current || dirty & /*tabindex*/ 512) {
				set_custom_element_data(ca_checkbox, "tabindex", /*tabindex*/ ctx[9]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ca_checkbox);
			if (default_slot) default_slot.d(detaching);
			/*ca_checkbox_binding*/ ctx[18](null);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { value = undefined } = $$props;
	let { label = undefined } = $$props;
	let { indeterminate = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { disabledByFahter = undefined } = $$props;
	let { checked = undefined } = $$props;
	let { name = undefined } = $$props;
	let { trueLabel = undefined } = $$props;
	let { falseLabel = undefined } = $$props;
	let { border = undefined } = $$props;
	let { size = undefined } = $$props;
	let { tabindex = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		$$invalidate(15, __mounted = true);
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(10, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function ca_checkbox_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(10, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('label' in $$props) $$invalidate(1, label = $$props.label);
		if ('indeterminate' in $$props) $$invalidate(2, indeterminate = $$props.indeterminate);
		if ('disabled' in $$props) $$invalidate(3, disabled = $$props.disabled);
		if ('disabledByFahter' in $$props) $$invalidate(4, disabledByFahter = $$props.disabledByFahter);
		if ('checked' in $$props) $$invalidate(5, checked = $$props.checked);
		if ('name' in $$props) $$invalidate(6, name = $$props.name);
		if ('trueLabel' in $$props) $$invalidate(12, trueLabel = $$props.trueLabel);
		if ('falseLabel' in $$props) $$invalidate(13, falseLabel = $$props.falseLabel);
		if ('border' in $$props) $$invalidate(7, border = $$props.border);
		if ('size' in $$props) $$invalidate(8, size = $$props.size);
		if ('tabindex' in $$props) $$invalidate(9, tabindex = $$props.tabindex);
		if ('$$scope' in $$props) $$invalidate(16, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*__mounted, trueLabel*/ 36864) {
			$: if (__mounted) setProp('trueLabel', trueLabel);
		}

		if ($$self.$$.dirty & /*__mounted, falseLabel*/ 40960) {
			$: if (__mounted) setProp('falseLabel', falseLabel);
		}
	};

	return [
		value,
		label,
		indeterminate,
		disabled,
		disabledByFahter,
		checked,
		name,
		border,
		size,
		tabindex,
		__ref,
		onEvent,
		trueLabel,
		falseLabel,
		getWebComponent,
		__mounted,
		$$scope,
		slots,
		ca_checkbox_binding
	];
}

class CaCheckbox extends SvelteComponent {
  $$prop_def: CaCheckboxProps;
  $$events_def: CaCheckboxEvents;
  $$slot_def: CaCheckboxSlots;

  $on<K extends keyof CaCheckboxEvents>(type: K, callback: (e: CaCheckboxEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<CaCheckboxProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			value: 0,
			label: 1,
			indeterminate: 2,
			disabled: 3,
			disabledByFahter: 4,
			checked: 5,
			name: 6,
			trueLabel: 12,
			falseLabel: 13,
			border: 7,
			size: 8,
			tabindex: 9,
			getWebComponent: 14
		});
	}

	get value() {
		return this.$$.ctx[0];
	}

	set value(value) {
		this.$$set({ value });
		flush();
	}

	get label() {
		return this.$$.ctx[1];
	}

	set label(label) {
		this.$$set({ label });
		flush();
	}

	get indeterminate() {
		return this.$$.ctx[2];
	}

	set indeterminate(indeterminate) {
		this.$$set({ indeterminate });
		flush();
	}

	get disabled() {
		return this.$$.ctx[3];
	}

	set disabled(disabled) {
		this.$$set({ disabled });
		flush();
	}

	get disabledByFahter() {
		return this.$$.ctx[4];
	}

	set disabledByFahter(disabledByFahter) {
		this.$$set({ disabledByFahter });
		flush();
	}

	get checked() {
		return this.$$.ctx[5];
	}

	set checked(checked) {
		this.$$set({ checked });
		flush();
	}

	get name() {
		return this.$$.ctx[6];
	}

	set name(name) {
		this.$$set({ name });
		flush();
	}

	get trueLabel() {
		return this.$$.ctx[12];
	}

	set trueLabel(trueLabel) {
		this.$$set({ trueLabel });
		flush();
	}

	get falseLabel() {
		return this.$$.ctx[13];
	}

	set falseLabel(falseLabel) {
		this.$$set({ falseLabel });
		flush();
	}

	get border() {
		return this.$$.ctx[7];
	}

	set border(border) {
		this.$$set({ border });
		flush();
	}

	get size() {
		return this.$$.ctx[8];
	}

	set size(size) {
		this.$$set({ size });
		flush();
	}

	get tabindex() {
		return this.$$.ctx[9];
	}

	set tabindex(tabindex) {
		this.$$set({ tabindex });
		flush();
	}

	get getWebComponent(): HTMLCaCheckboxElement | undefined {
		return this.$$.ctx[14];
	}
}

export default CaCheckbox;