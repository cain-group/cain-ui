/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { Components, JSX } from '@cain-group/cain-ui';


interface CaButtonProps {
  
  /**  */
  type?: Components.CaButton["type"]
  
  /**  */
  disabled?: Components.CaButton["disabled"]
  
  /**  */
  loading?: Components.CaButton["loading"]
  
  /**  */
  plain?: Components.CaButton["plain"]
  
  /**  */
  round?: Components.CaButton["round"]
  
  /**  */
  autofocus?: Components.CaButton["autofocus"]
  
  /**  */
  circle?: Components.CaButton["circle"]
  
  /**  */
  size?: Components.CaButton["size"]
  
  /**  */
  nativeType?: Components.CaButton["nativeType"]
}

interface CaButtonEvents {
  
}

interface CaButtonSlots {
  default: any
}
  
/* generated by Svelte v3.47.0 */
import {
	SvelteComponent,
	binding_callbacks,
	create_slot,
	detach,
	element,
	flush,
	get_all_dirty_from_scope,
	get_slot_changes,
	init,
	insert,
	safe_not_equal,
	set_custom_element_data,
	transition_in,
	transition_out,
	update_slot_base
} from "svelte/internal";

import { createEventDispatcher, onMount } from 'svelte';

function create_fragment(ctx) {
	let ca_button;
	let current;
	const default_slot_template = /*#slots*/ ctx[12].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[11], null);

	return {
		c() {
			ca_button = element("ca-button");
			if (default_slot) default_slot.c();
			set_custom_element_data(ca_button, "type", /*type*/ ctx[0]);
			set_custom_element_data(ca_button, "disabled", /*disabled*/ ctx[1]);
			set_custom_element_data(ca_button, "loading", /*loading*/ ctx[2]);
			set_custom_element_data(ca_button, "plain", /*plain*/ ctx[3]);
			set_custom_element_data(ca_button, "round", /*round*/ ctx[4]);
			set_custom_element_data(ca_button, "autofocus", /*autofocus*/ ctx[5]);
			set_custom_element_data(ca_button, "circle", /*circle*/ ctx[6]);
			set_custom_element_data(ca_button, "size", /*size*/ ctx[7]);
			set_custom_element_data(ca_button, "native-type", /*nativeType*/ ctx[8]);
		},
		m(target, anchor) {
			insert(target, ca_button, anchor);

			if (default_slot) {
				default_slot.m(ca_button, null);
			}

			/*ca_button_binding*/ ctx[13](ca_button);
			current = true;
			if (/*autofocus*/ ctx[5]) ca_button.focus();
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 2048)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[11],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[11])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[11], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*type*/ 1) {
				set_custom_element_data(ca_button, "type", /*type*/ ctx[0]);
			}

			if (!current || dirty & /*disabled*/ 2) {
				set_custom_element_data(ca_button, "disabled", /*disabled*/ ctx[1]);
			}

			if (!current || dirty & /*loading*/ 4) {
				set_custom_element_data(ca_button, "loading", /*loading*/ ctx[2]);
			}

			if (!current || dirty & /*plain*/ 8) {
				set_custom_element_data(ca_button, "plain", /*plain*/ ctx[3]);
			}

			if (!current || dirty & /*round*/ 16) {
				set_custom_element_data(ca_button, "round", /*round*/ ctx[4]);
			}

			if (!current || dirty & /*autofocus*/ 32) {
				set_custom_element_data(ca_button, "autofocus", /*autofocus*/ ctx[5]);
			}

			if (!current || dirty & /*circle*/ 64) {
				set_custom_element_data(ca_button, "circle", /*circle*/ ctx[6]);
			}

			if (!current || dirty & /*size*/ 128) {
				set_custom_element_data(ca_button, "size", /*size*/ ctx[7]);
			}

			if (!current || dirty & /*nativeType*/ 256) {
				set_custom_element_data(ca_button, "native-type", /*nativeType*/ ctx[8]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(ca_button);
			if (default_slot) default_slot.d(detaching);
			/*ca_button_binding*/ ctx[13](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let __ref;
	let __mounted = false;
	const dispatch = createEventDispatcher();
	let { type = undefined } = $$props;
	let { disabled = undefined } = $$props;
	let { loading = undefined } = $$props;
	let { plain = undefined } = $$props;
	let { round = undefined } = $$props;
	let { autofocus = undefined } = $$props;
	let { circle = undefined } = $$props;
	let { size = undefined } = $$props;
	let { nativeType = undefined } = $$props;
	const getWebComponent = () => __ref;

	onMount(() => {
		__mounted = true;
	});

	const setProp = (prop, value) => {
		if (__ref) $$invalidate(9, __ref[prop] = value, __ref);
	};

	const onEvent = e => {
		e.stopPropagation();
		dispatch(e.type, e.detail);
	};

	function ca_button_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			__ref = $$value;
			$$invalidate(9, __ref);
		});
	}

	$$self.$$set = $$props => {
		if ('type' in $$props) $$invalidate(0, type = $$props.type);
		if ('disabled' in $$props) $$invalidate(1, disabled = $$props.disabled);
		if ('loading' in $$props) $$invalidate(2, loading = $$props.loading);
		if ('plain' in $$props) $$invalidate(3, plain = $$props.plain);
		if ('round' in $$props) $$invalidate(4, round = $$props.round);
		if ('autofocus' in $$props) $$invalidate(5, autofocus = $$props.autofocus);
		if ('circle' in $$props) $$invalidate(6, circle = $$props.circle);
		if ('size' in $$props) $$invalidate(7, size = $$props.size);
		if ('nativeType' in $$props) $$invalidate(8, nativeType = $$props.nativeType);
		if ('$$scope' in $$props) $$invalidate(11, $$scope = $$props.$$scope);
	};

	return [
		type,
		disabled,
		loading,
		plain,
		round,
		autofocus,
		circle,
		size,
		nativeType,
		__ref,
		getWebComponent,
		$$scope,
		slots,
		ca_button_binding
	];
}

class CaButton extends SvelteComponent {
  $$prop_def: CaButtonProps;
  $$events_def: CaButtonEvents;
  $$slot_def: CaButtonSlots;

  $on<K extends keyof CaButtonEvents>(type: K, callback: (e: CaButtonEvents[K]) => any): () => void {
	  return super.$on(type, callback);
	}

  $set($$props: Partial<CaButtonProps>): void {
	  super.$set($$props);
	}

	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			type: 0,
			disabled: 1,
			loading: 2,
			plain: 3,
			round: 4,
			autofocus: 5,
			circle: 6,
			size: 7,
			nativeType: 8,
			getWebComponent: 10
		});
	}

	get type() {
		return this.$$.ctx[0];
	}

	set type(type) {
		this.$$set({ type });
		flush();
	}

	get disabled() {
		return this.$$.ctx[1];
	}

	set disabled(disabled) {
		this.$$set({ disabled });
		flush();
	}

	get loading() {
		return this.$$.ctx[2];
	}

	set loading(loading) {
		this.$$set({ loading });
		flush();
	}

	get plain() {
		return this.$$.ctx[3];
	}

	set plain(plain) {
		this.$$set({ plain });
		flush();
	}

	get round() {
		return this.$$.ctx[4];
	}

	set round(round) {
		this.$$set({ round });
		flush();
	}

	get autofocus() {
		return this.$$.ctx[5];
	}

	set autofocus(autofocus) {
		this.$$set({ autofocus });
		flush();
	}

	get circle() {
		return this.$$.ctx[6];
	}

	set circle(circle) {
		this.$$set({ circle });
		flush();
	}

	get size() {
		return this.$$.ctx[7];
	}

	set size(size) {
		this.$$set({ size });
		flush();
	}

	get nativeType() {
		return this.$$.ctx[8];
	}

	set nativeType(nativeType) {
		this.$$set({ nativeType });
		flush();
	}

	get getWebComponent(): HTMLCaButtonElement | undefined {
		return this.$$.ctx[10];
	}
}

export default CaButton;