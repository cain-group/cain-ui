@use 'sass:math';
@use 'sass:map';

@use 'mixins/mixins' as *;
@use 'common/var' as *;

@include b(input-number) {
  position: relative;
  display: inline-block;
  width: map.get($input-number-width, 'default');
  line-height: #{map.get($input-height, 'default') - 2};

  .#{$namespace}-input {
    display: block;

    &__inner {
      -webkit-appearance: none;
      -moz-appearance: textfield;
      &::-webkit-inner-spin-button,
      &::-webkit-outer-spin-button {
        margin: 0;
        -webkit-appearance: none;
      }
      padding-left: #{map.get($input-height, 'default') + 10};
      padding-right: #{map.get($input-height, 'default') + 10};
      text-align: center;
    }
  }

  @include e((increase, decrease)) {
    display: flex;
    justify-content: center;
    align-items: center;
    height: auto;

    position: absolute;
    z-index: 1;
    top: 1px;
    bottom: 1px;

    width: map.get($input-height, 'default');
    background: getCssVar('fill-color', 'light');
    color: var(--ca-text-color-regular);
    cursor: pointer;
    font-size: 13px;
    user-select: none;

    &:hover {
      color: var(--ca-color-primary);

      & ~ .#{$namespace}-input:not(.is-disabled) .#{$namespace}-input__inner {
        box-shadow: 0 0 0 1px
          var(
            --ca-input-focus-border-color,
            map.get($input, 'focus-border-color')
          )
          inset;
      }
    }

    &.is-disabled {
      color: getCssVar('disabled-text-color');
      cursor: not-allowed;
    }
  }

  @include e(increase) {
    right: 1px;
    border-radius: 0 var(--ca-border-radius-base) var(--ca-border-radius-base) 0;
    border-left: var(--ca-border);
  }

  @include e(decrease) {
    left: 1px;
    border-radius: var(--ca-border-radius-base) 0 0 var(--ca-border-radius-base);
    border-right: var(--ca-border);
  }

  @include when(disabled) {
    @include e((increase, decrease)) {
      border-color: var(--ca-disabled-border-color);
      color: var(--ca-disabled-border-color);

      &:hover {
        color: var(--ca-disabled-border-color);
        cursor: not-allowed;
      }
    }
  }

  @each $size in (large, small) {
    @include m($size) {
      width: map.get($input-number-width, $size);
      line-height: #{map.get($input-height, $size) - 2};

      @include e((increase, decrease)) {
        width: map.get($input-height, $size);
        font-size: map.get($input-font-size, $size);
      }

      .#{$namespace}-input__inner {
        padding-left: #{map.get($input-height, $size) + 7};
        padding-right: #{map.get($input-height, $size) + 7};
      }
    }
  }

  @include m(small) {
    @include e((increase, decrease)) {
      [class*='#{$namespace}-icon'] {
        transform: scale(0.9);
      }
    }
  }

  @include when(without-controls) {
    .#{$namespace}-input__inner {
      padding-left: 15px;
      padding-right: 15px;
    }
  }

  @include when(controls-right) {
    .#{$namespace}-input__inner {
      padding-left: 15px;
      padding-right: #{map.get($input-height, 'default') + 10};
    }

    @include e((increase, decrease)) {
      --ca-input-number-controls-height: #{math.div(
          map.get($input-height, 'default') - 2,
          2
        )};

      height: var(--ca-input-number-controls-height);
      line-height: var(--ca-input-number-controls-height);

      [class*='#{$namespace}-icon'] {
        transform: scale(0.8);
      }
    }

    @include e(increase) {
      bottom: auto;
      left: auto;
      border-radius: 0 var(--ca-border-radius-base) 0 0;
      border-bottom: var(--ca-border);
    }

    @include e(decrease) {
      right: 1px;
      top: auto;
      left: auto;
      border-right: none;
      border-left: var(--ca-border);
      border-radius: 0 0 var(--ca-border-radius-base) 0;
    }

    @each $size in (large, small) {
      &[class*='#{$size}'] {
        [class*='increase'],
        [class*='decrease'] {
          --ca-input-number-controls-height: #{math.div(
              map.get($input-height, $size) - 2,
              2
            )};
        }
      }
    }
  }
}
